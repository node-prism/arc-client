import{CommandClient as a}from"@prsm/duplex";var o=class{client;authenticated=!1;username;password;tokens;constructor({host:t,port:e,secure:r,username:s,password:n}){this.client=new a({host:t,port:e,secure:r}),this.username=s,this.password=n}async refresh(){let{accessToken:t,refreshToken:e}=this.tokens,r=await this.client.command(1,{accessToken:t,refreshToken:e});if(r.error)throw new Error(r.error);this.tokens={accessToken:r.accessToken,refreshToken:r.refreshToken}}async auth(){let t={username:this.username,password:this.password},e=await this.client.command(0,t);if(e.error)throw new Error("Failed to authenticate");this.tokens={accessToken:e.accessToken,refreshToken:e.refreshToken},this.authenticated=!0}async query(t){if(!this.authenticated)try{await this.auth()}catch{throw new Error("Failed to authenticate")}t.accessToken=this.tokens.accessToken;let e;if(e=await this.client.command(2,t),e.error){try{await this.refresh()}catch(r){throw new Error(`Failed to refresh tokens: ${r.message}`)}return await this.query(t)}return e}async createUser(t,e){let r={username:t,password:e,accessToken:this.tokens.accessToken};return await this.client.command(3,r)}async removeUser(t){let e={username:t,accessToken:this.tokens.accessToken};return await this.client.command(4,e)}collectionWrapper(t){return{find:(e,r)=>this.query({collection:t,operation:"find",data:{query:e,options:r}}),insert:e=>this.query({collection:t,operation:"insert",data:{query:e}}),update:(e,r,s)=>this.query({collection:t,operation:"update",data:{query:e,operations:r,options:s}}),remove:(e,r)=>this.query({collection:t,operation:"remove",data:{query:e,options:r}}),drop:()=>this.query({collection:t,operation:"drop"})}}};export{o as ArcClient};
