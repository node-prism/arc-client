import{CommandClient as o}from"@prsm/duplex";import i from"events";var r=class{client;authenticated=!1;username;password;tokens;emitter;constructor(t){this.client=new o(t),this.username=t.username,this.password=t.password,this.emitter=new i}close(){this.authenticated=!1,this.client.close()}open(){this.client.connect()}async auth(){let t={username:this.username,password:this.password},e=await this.client.command(0,t);return console.log("auth result",e),e.error?(this.emitter.emit("autherror",e.error),!1):(this.tokens={accessToken:e.result.accessToken},this.authenticated=!0,this.emitter.emit("authsuccess"),!0)}async query(t){if(!this.authenticated)try{await this.auth()}catch{throw new Error("Failed to authenticate")}return t.accessToken=this.tokens.accessToken,await this.client.command(2,t)}async createUser(t,e){let s={username:t,password:e,accessToken:this.tokens.accessToken};return await this.client.command(3,s)}async removeUser(t){let e={username:t,accessToken:this.tokens.accessToken};return await this.client.command(4,e)}collectionWrapper(t){return{find:(e,s)=>this.query({collection:t,operation:"find",data:{query:e,options:s}}),insert:e=>this.query({collection:t,operation:"insert",data:{query:e}}),update:(e,s,n)=>this.query({collection:t,operation:"update",data:{query:e,operations:s,options:n}}),remove:(e,s)=>this.query({collection:t,operation:"remove",data:{query:e,options:s}}),drop:()=>this.query({collection:t,operation:"drop"})}}};export{r as ArcClient};
