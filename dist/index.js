import{CommandClient as o}from"@prsm/duplex";var r=class{client;authenticated=!1;username;password;tokens;constructor({host:s,port:e,secure:t,username:n,password:a}){this.client=new o({host:s,port:e,secure:t}),this.username=n,this.password=a}async refresh(){let{accessToken:s,refreshToken:e}=this.tokens,t=await this.client.command(1,{accessToken:s,refreshToken:e});if(t.error)throw new Error(t.error);this.tokens={accessToken:t.accessToken,refreshToken:t.refreshToken}}async auth(){let s={username:this.username,password:this.password},e=await this.client.command(0,s);if(e.error)throw new Error("Failed to authenticate");this.tokens={accessToken:e.accessToken,refreshToken:e.refreshToken},this.authenticated=!0}async query(s){if(!this.authenticated)try{await this.auth()}catch{throw new Error("Failed to authenticate")}s.accessToken=this.tokens.accessToken;let e;if(e=await this.client.command(2,s),e.error){try{await this.refresh()}catch(t){throw new Error(`Failed to refresh tokens: ${t.mesage}`)}return await this.query(s)}return e}async createUser(s,e){let t={username:s,password:e,accessToken:this.tokens.accessToken};return await this.client.command(3,t)}async removeUser(s){let e={username:s,accessToken:this.tokens.accessToken};return await this.client.command(4,e)}};export{r as ArcClient};
