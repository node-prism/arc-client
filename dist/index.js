import{CommandClient as n}from"@prsm/duplex";import a from"events";var o=class{client;authenticated=!1;username;password;tokens;emitter;constructor({host:e,port:t,secure:s,username:r,password:i}){this.client=new n({host:e,port:t,secure:s}),this.username=r,this.password=i,this.emitter=new a}close(){this.authenticated=!1,this.client.close()}open(){this.client.connect()}async auth(){let e={username:this.username,password:this.password},t=await this.client.command(0,e);return t.error?(this.emitter.emit("autherror",t.error),!1):(this.tokens={accessToken:t.accessToken},this.authenticated=!0,this.emitter.emit("authsuccess"),!0)}async query(e){if(!this.authenticated)try{await this.auth()}catch{throw new Error("Failed to authenticate")}return e.accessToken=this.tokens.accessToken,await this.client.command(2,e)}async createUser(e,t){let s={username:e,password:t,accessToken:this.tokens.accessToken};return await this.client.command(3,s)}async removeUser(e){let t={username:e,accessToken:this.tokens.accessToken};return await this.client.command(4,t)}collectionWrapper(e){return{find:(t,s)=>this.query({collection:e,operation:"find",data:{query:t,options:s}}),insert:t=>this.query({collection:e,operation:"insert",data:{query:t}}),update:(t,s,r)=>this.query({collection:e,operation:"update",data:{query:t,operations:s,options:r}}),remove:(t,s)=>this.query({collection:e,operation:"remove",data:{query:t,options:s}}),drop:()=>this.query({collection:e,operation:"drop"})}}};export{o as ArcClient};
